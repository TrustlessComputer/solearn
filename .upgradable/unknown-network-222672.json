{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x786C10c6621f15345377eB032F2BF57A63C0C9eB",
    "txHash": "0xd7d33570d3ea33793db0d20f67ad8ab656753ed54a91def5e6aa025993fab1ba"
  },
  "proxies": [
    {
      "address": "0xA100E81bD022a7aC0A7E2271dA52521c2f507C40",
      "txHash": "0xa3929b70a5ff2b27a64066b563efa7da2920ef7777bc0d7092f9134096b3345a",
      "kind": "transparent"
    },
    {
      "address": "0xB163afD1Bf51f0642e36353Cea6F71E5D1470828",
      "txHash": "0xb796370d383aa79a3c0ca9ebdabc2826670391fd42849308f016ffd721889c83",
      "kind": "transparent"
    },
    {
      "address": "0x64a2f7072601C6f0cb401edE3EE099F795880Ed6",
      "txHash": "0x315e11d7bbac1c85408fe4305b9056a40932abbbd49372eb2888dc4dd51cc501",
      "kind": "transparent"
    },
    {
      "address": "0x44ff9E3bb884d9f6E94EF1e2028D604F1b46E9Fb",
      "txHash": "0x228d47539694bc6b4aced4ad95c56596a8671854f4f614531bcdf70a75c14217",
      "kind": "transparent"
    },
    {
      "address": "0xfd6D21E8f0fA2D2c39017f55F9fD8FE4d250833A",
      "txHash": "0x0098236a095bfacc9d8f26b75ac383b73d9a0056f1923606c3b6e5b696361924",
      "kind": "transparent"
    },
    {
      "address": "0x74D7E59Df9db72Cf94196c07598Eeb23476bCF0D",
      "txHash": "0x2938e78ba3242c540bf381c80deb0fa804b58ccbb26dab34c6a166c14b87a25f",
      "kind": "transparent"
    },
    {
      "address": "0x177cb2d4E52515EbB7D573b5b538158213AbA11B",
      "txHash": "0x413a416a665c79b270496ef9589763feca6edaa59a7f9e2320a3ea2eea15a49b",
      "kind": "transparent"
    },
    {
      "address": "0x03dA76b55A94Ba701F8C27eDCDA6d93b294a7de8",
      "txHash": "0xe67fa7c73720c0618f3dcbf5c6ac687fb18964901a90bfddcd09767da33f6d83",
      "kind": "transparent"
    },
    {
      "address": "0x8D38C23403d357d69bA615afba8a6D59B3E3c827",
      "txHash": "0xa0417785ba14370813cb9cdb9185b282bca5b627a41bbb7e17b08649db3705fb",
      "kind": "transparent"
    },
    {
      "address": "0x491BD5C3874450833d72c5f020AB4e9150782cB8",
      "txHash": "0x0ec34b420241d608f09a5f29b895161c9a521e3dd2b0420eb980cf05e8b96ffc",
      "kind": "transparent"
    },
    {
      "address": "0x53bb7010715DcC25D7FCE77828955E99c0d8625B",
      "txHash": "0x30c47733442495b0061a870523bc32e77a6af281c70fda37f86c1fde07b5e482",
      "kind": "transparent"
    },
    {
      "address": "0xeb35aB312d1543463CFecfAd8ad6E36D550C28c8",
      "txHash": "0x4d9904611fddbb43f132e0a726c1093edfe9603dbfcd70ea750c3c3477d4fe2c",
      "kind": "transparent"
    },
    {
      "address": "0xcc967D61c79B76B3f06B0a06b1dE3C6eC125AF6B",
      "txHash": "0xcbe22bf0af730880d7da80e01b6791e8aba49bfcdf9594dca0e501da086a7bd9",
      "kind": "transparent"
    },
    {
      "address": "0xb39fcB592EacDb3607E32ea3994dDBEE4006C04f",
      "txHash": "0x87aa347c60d923dae370dc335d84ef7bf1af357ec88d3fe079ecc6869ca6d4a1",
      "kind": "transparent"
    },
    {
      "address": "0xC477C844836CfFE92505abc3Fddb9f8A661284Ab",
      "txHash": "0xf6c2cd4a117fcc882ecd8c63033611023185038a873943381d799ad8b5c85460",
      "kind": "transparent"
    },
    {
      "address": "0x6983754f1952B10DcA713BAeb8f26545f74A058D",
      "txHash": "0x6c8ad1e6d5b5a2c5fbda9387c4778da710ef891320027ab6f6a2b6de824445d9",
      "kind": "transparent"
    }
  ],
  "impls": {
    "a21dd8125e672170af48fa5711dbdfe8e4e292425145898369940b860d61ebf9": {
      "address": "0xc48c052692153b736A021aCD57Cb9c78a9aD0C50",
      "txHash": "0xe375b03a5c56c149a30a0e7105e06aeb6fe04b3dc760bf5df1e628c3b1b98157",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "randomizer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Randomizer)4412_storage",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:10"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(Model)4052_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:12"
          },
          {
            "label": "miners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Worker)4065_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:13"
          },
          {
            "label": "validators",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Worker)4065_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:14"
          },
          {
            "label": "minerAddressesByModel",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(AddressSet)4456_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:16"
          },
          {
            "label": "validatorAddressesByModel",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(AddressSet)4456_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:17"
          },
          {
            "label": "modelAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)4456_storage",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:19"
          },
          {
            "label": "minerAddresses",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)4456_storage",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:20"
          },
          {
            "label": "validatorAddresses",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(AddressSet)4456_storage",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:21"
          },
          {
            "label": "minerUnstakeRequests",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4150_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:23"
          },
          {
            "label": "validatorUnstakeRequests",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4150_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:24"
          },
          {
            "label": "inferenceNumber",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:26"
          },
          {
            "label": "inferences",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(Inference)4125_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:27"
          },
          {
            "label": "assignmentNumber",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:29"
          },
          {
            "label": "assignments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(Assignment)4089_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:30"
          },
          {
            "label": "assignmentsByMiner",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_struct(Uint256Set)4626_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:31"
          },
          {
            "label": "assignmentsByInference",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_struct(Uint256Set)4626_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:32"
          },
          {
            "label": "validatorDisputed",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:34"
          },
          {
            "label": "rewardInEpoch",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(MinerEpochState)4047_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:38"
          },
          {
            "label": "minerTaskCompleted",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:43"
          },
          {
            "label": "minerMinimumStake",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:45"
          },
          {
            "label": "validatorMinimumStake",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:46"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "25",
            "type": "t_address",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:47"
          },
          {
            "label": "feePercentage",
            "offset": 20,
            "slot": "25",
            "type": "t_uint16",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:48"
          },
          {
            "label": "miningTimeLimit",
            "offset": 22,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:49"
          },
          {
            "label": "validatingTimeLimit",
            "offset": 27,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:50"
          },
          {
            "label": "disputingTimeLimit",
            "offset": 0,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:51"
          },
          {
            "label": "penaltyDuration",
            "offset": 5,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:52"
          },
          {
            "label": "unstakeDelayTime",
            "offset": 10,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:53"
          },
          {
            "label": "minerRequirement",
            "offset": 15,
            "slot": "26",
            "type": "t_uint8",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:54"
          },
          {
            "label": "maximumTier",
            "offset": 16,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:56"
          },
          {
            "label": "disqualificationPercentage",
            "offset": 18,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:57"
          },
          {
            "label": "currentEpoch",
            "offset": 20,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:60"
          },
          {
            "label": "blocksPerEpoch",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:61"
          },
          {
            "label": "lastBlock",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:62"
          },
          {
            "label": "rewardPerEpochBasedOnPerf",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:63"
          },
          {
            "label": "rewardPerEpoch",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:64"
          },
          {
            "label": "finePercentage",
            "offset": 0,
            "slot": "31",
            "type": "t_uint16",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:67"
          },
          {
            "label": "minerRewards",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:70"
          },
          {
            "label": "boost",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_struct(Boost)4159_storage)",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:73"
          },
          {
            "label": "stakeToken",
            "offset": 0,
            "slot": "34",
            "type": "t_address",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:75"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "35",
            "type": "t_array(t_uint256)96_storage",
            "contract": "WorkerHubStorage",
            "src": "contracts/storages/WorkerHubStorage.sol:77"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "131",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "131",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "132",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "182",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "183",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "232",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "282",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "283",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)96_storage": {
            "label": "uint256[96]",
            "numberOfBytes": "3072"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(InferenceStatus)4038": {
            "label": "enum IWorkerHub.InferenceStatus",
            "members": [
              "Nil",
              "Solving",
              "Disputing",
              "Solved",
              "Killed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressSet)4456_storage)": {
            "label": "mapping(address => struct Set.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Boost)4159_storage)": {
            "label": "mapping(address => struct IWorkerHub.Boost)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Model)4052_storage)": {
            "label": "mapping(address => struct IWorkerHub.Model)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Uint256Set)4626_storage)": {
            "label": "mapping(address => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UnstakeRequest)4150_storage)": {
            "label": "mapping(address => struct IWorkerHub.UnstakeRequest)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Worker)4065_storage)": {
            "label": "mapping(address => struct IWorkerHub.Worker)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Assignment)4089_storage)": {
            "label": "mapping(uint256 => struct IWorkerHub.Assignment)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Inference)4125_storage)": {
            "label": "mapping(uint256 => struct IWorkerHub.Inference)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(MinerEpochState)4047_storage)": {
            "label": "mapping(uint256 => struct IWorkerHub.MinerEpochState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Uint256Set)4626_storage)": {
            "label": "mapping(uint256 => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4456_storage": {
            "label": "struct Set.AddressSet",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Assignment)4089_storage": {
            "label": "struct IWorkerHub.Assignment",
            "members": [
              {
                "label": "inferenceId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "output",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "worker",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disapprovalCount",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Boost)4159_storage": {
            "label": "struct IWorkerHub.Boost",
            "members": [
              {
                "label": "minerTimestamp",
                "type": "t_uint40",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validatorTimestamp",
                "type": "t_uint40",
                "offset": 5,
                "slot": "0"
              },
              {
                "label": "reserved1",
                "type": "t_uint48",
                "offset": 10,
                "slot": "0"
              },
              {
                "label": "reserved2",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Inference)4125_storage": {
            "label": "struct IWorkerHub.Inference",
            "members": [
              {
                "label": "assignments",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "input",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disputingAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "expiredAt",
                "type": "t_uint40",
                "offset": 20,
                "slot": "4"
              },
              {
                "label": "firstSubmissionId",
                "type": "t_uint8",
                "offset": 25,
                "slot": "4"
              },
              {
                "label": "status",
                "type": "t_enum(InferenceStatus)4038",
                "offset": 26,
                "slot": "4"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(MinerEpochState)4047_storage": {
            "label": "struct IWorkerHub.MinerEpochState",
            "members": [
              {
                "label": "perfReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "epochReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalTaskCompleted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalMiner",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Model)4052_storage": {
            "label": "struct IWorkerHub.Model",
            "members": [
              {
                "label": "minimumFee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tier",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Randomizer)4412_storage": {
            "label": "struct Random.Randomizer",
            "members": [
              {
                "label": "nonce",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Uint256Set)4626_storage": {
            "label": "struct Set.Uint256Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UnstakeRequest)4150_storage": {
            "label": "struct IWorkerHub.UnstakeRequest",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockAt",
                "type": "t_uint40",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Worker)4065_storage": {
            "label": "struct IWorkerHub.Worker",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "commitment",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lastClaimedEpoch",
                "type": "t_uint40",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "activeTime",
                "type": "t_uint40",
                "offset": 25,
                "slot": "2"
              },
              {
                "label": "tier",
                "type": "t_uint16",
                "offset": 30,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "8f98df50280f0043803ea46917223bc888c391a68743fcfab04b13e8ee2b5f72": {
      "address": "0x78812616452d77ec84E5c1a9c222734985966D67",
      "txHash": "0x131479ba6ca74c280ae351604805bbdffcd85134e860a94660367f95084577ef",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:477"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ModelCollectionStorage",
            "src": "contracts/storages/ModelCollectionStorage.sol:7"
          },
          {
            "label": "nextModelId",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ModelCollectionStorage",
            "src": "contracts/storages/ModelCollectionStorage.sol:8"
          },
          {
            "label": "mintPrice",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ModelCollectionStorage",
            "src": "contracts/storages/ModelCollectionStorage.sol:9"
          },
          {
            "label": "royaltyReceiver",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ModelCollectionStorage",
            "src": "contracts/storages/ModelCollectionStorage.sol:10"
          },
          {
            "label": "royaltyPortion",
            "offset": 20,
            "slot": "154",
            "type": "t_uint16",
            "contract": "ModelCollectionStorage",
            "src": "contracts/storages/ModelCollectionStorage.sol:11"
          },
          {
            "label": "isManager",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ModelCollectionStorage",
            "src": "contracts/storages/ModelCollectionStorage.sol:13"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ModelCollectionStorage",
            "src": "contracts/storages/ModelCollectionStorage.sol:15"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "205",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "206",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "207",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "208",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "209",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "257",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:17"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "258",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:20"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "259",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:23"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "260",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:26"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "261",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "307",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "308",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "357",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:53"
          },
          {
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC721URIStorageUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:17"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "408",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC721URIStorageUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:86"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "457",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "458",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "e018b71188fa5a7d7c3dcd795f3ce65d046dd20c0edd046897fb5ab881ff7729": {
      "address": "0x074E983f7f8558D8F161710Ab1D63b8F050657e5",
      "txHash": "0xbca911a0321264b04da258336bb1444a3507e86200d13dac07b617b117af0fcb",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:477"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:7"
          },
          {
            "label": "nextModelId",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:8"
          },
          {
            "label": "mintPrice",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:9"
          },
          {
            "label": "royaltyReceiver",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:10"
          },
          {
            "label": "royaltyPortion",
            "offset": 20,
            "slot": "154",
            "type": "t_uint16",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:11"
          },
          {
            "label": "isManager",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:13"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:15"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "205",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "206",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "207",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "208",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "209",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "257",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:17"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "258",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:20"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "259",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:23"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "260",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:26"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "261",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "307",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "308",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "357",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:53"
          },
          {
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC721URIStorageUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:17"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "408",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC721URIStorageUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:86"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "457",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "458",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "273b1453be533de174ac8c29a86c5d9b41d43a9a9eb53e6371284bcfd8320306": {
      "address": "0x713d319c5070D08763A6A61c120dd15b25E568bd",
      "txHash": "0x0c2c2a85d72a06eafa405562f8646d1ead2ef778e7755bd7ee9e7c1b1373a2ce",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "randomizer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Randomizer)9212_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:10"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(Model)8852_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:12"
          },
          {
            "label": "miners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Worker)8865_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:13"
          },
          {
            "label": "validators",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Worker)8865_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:14"
          },
          {
            "label": "minerAddressesByModel",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(AddressSet)9256_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:16"
          },
          {
            "label": "validatorAddressesByModel",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(AddressSet)9256_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:17"
          },
          {
            "label": "modelAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)9256_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:19"
          },
          {
            "label": "minerAddresses",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)9256_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:20"
          },
          {
            "label": "validatorAddresses",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(AddressSet)9256_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:21"
          },
          {
            "label": "minerUnstakeRequests",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)8950_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:23"
          },
          {
            "label": "validatorUnstakeRequests",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)8950_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:24"
          },
          {
            "label": "inferenceNumber",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:26"
          },
          {
            "label": "inferences",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(Inference)8925_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:27"
          },
          {
            "label": "assignmentNumber",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:29"
          },
          {
            "label": "assignments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(Assignment)8889_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:30"
          },
          {
            "label": "assignmentsByMiner",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_struct(Uint256Set)9426_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:31"
          },
          {
            "label": "assignmentsByInference",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_struct(Uint256Set)9426_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:32"
          },
          {
            "label": "validatorDisputed",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:34"
          },
          {
            "label": "rewardInEpoch",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(MinerEpochState)8847_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:38"
          },
          {
            "label": "minerTaskCompleted",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:43"
          },
          {
            "label": "minerMinimumStake",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:45"
          },
          {
            "label": "validatorMinimumStake",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:46"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "25",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:47"
          },
          {
            "label": "feePercentage",
            "offset": 20,
            "slot": "25",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:48"
          },
          {
            "label": "miningTimeLimit",
            "offset": 22,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:49"
          },
          {
            "label": "validatingTimeLimit",
            "offset": 27,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:50"
          },
          {
            "label": "disputingTimeLimit",
            "offset": 0,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:51"
          },
          {
            "label": "penaltyDuration",
            "offset": 5,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:52"
          },
          {
            "label": "unstakeDelayTime",
            "offset": 10,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:53"
          },
          {
            "label": "minerRequirement",
            "offset": 15,
            "slot": "26",
            "type": "t_uint8",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:54"
          },
          {
            "label": "maximumTier",
            "offset": 16,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:56"
          },
          {
            "label": "disqualificationPercentage",
            "offset": 18,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:57"
          },
          {
            "label": "currentEpoch",
            "offset": 20,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:60"
          },
          {
            "label": "blocksPerEpoch",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:61"
          },
          {
            "label": "lastBlock",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:62"
          },
          {
            "label": "rewardPerEpochBasedOnPerf",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:63"
          },
          {
            "label": "rewardPerEpoch",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:64"
          },
          {
            "label": "finePercentage",
            "offset": 0,
            "slot": "31",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:67"
          },
          {
            "label": "minerRewards",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:70"
          },
          {
            "label": "boost",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_struct(Boost)8959_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:73"
          },
          {
            "label": "stakeToken",
            "offset": 0,
            "slot": "34",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:75"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "35",
            "type": "t_array(t_uint256)96_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:77"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "131",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "131",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "132",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "182",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "183",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "232",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "282",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "283",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)96_storage": {
            "label": "uint256[96]",
            "numberOfBytes": "3072"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(InferenceStatus)8838": {
            "label": "enum IWorkerHubERC20.InferenceStatus",
            "members": [
              "Nil",
              "Solving",
              "Disputing",
              "Solved",
              "Killed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressSet)9256_storage)": {
            "label": "mapping(address => struct Set.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Boost)8959_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Boost)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Model)8852_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Model)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Uint256Set)9426_storage)": {
            "label": "mapping(address => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UnstakeRequest)8950_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.UnstakeRequest)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Worker)8865_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Worker)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Assignment)8889_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Assignment)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Inference)8925_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Inference)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(MinerEpochState)8847_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.MinerEpochState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Uint256Set)9426_storage)": {
            "label": "mapping(uint256 => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)9256_storage": {
            "label": "struct Set.AddressSet",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Assignment)8889_storage": {
            "label": "struct IWorkerHubERC20.Assignment",
            "members": [
              {
                "label": "inferenceId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "output",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "worker",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disapprovalCount",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Boost)8959_storage": {
            "label": "struct IWorkerHubERC20.Boost",
            "members": [
              {
                "label": "minerTimestamp",
                "type": "t_uint40",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validatorTimestamp",
                "type": "t_uint40",
                "offset": 5,
                "slot": "0"
              },
              {
                "label": "reserved1",
                "type": "t_uint48",
                "offset": 10,
                "slot": "0"
              },
              {
                "label": "reserved2",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Inference)8925_storage": {
            "label": "struct IWorkerHubERC20.Inference",
            "members": [
              {
                "label": "assignments",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "input",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disputingAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "expiredAt",
                "type": "t_uint40",
                "offset": 20,
                "slot": "4"
              },
              {
                "label": "firstSubmissionId",
                "type": "t_uint8",
                "offset": 25,
                "slot": "4"
              },
              {
                "label": "status",
                "type": "t_enum(InferenceStatus)8838",
                "offset": 26,
                "slot": "4"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(MinerEpochState)8847_storage": {
            "label": "struct IWorkerHubERC20.MinerEpochState",
            "members": [
              {
                "label": "perfReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "epochReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalTaskCompleted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalMiner",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Model)8852_storage": {
            "label": "struct IWorkerHubERC20.Model",
            "members": [
              {
                "label": "minimumFee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tier",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Randomizer)9212_storage": {
            "label": "struct Random.Randomizer",
            "members": [
              {
                "label": "nonce",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Uint256Set)9426_storage": {
            "label": "struct Set.Uint256Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UnstakeRequest)8950_storage": {
            "label": "struct IWorkerHubERC20.UnstakeRequest",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockAt",
                "type": "t_uint40",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Worker)8865_storage": {
            "label": "struct IWorkerHubERC20.Worker",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "commitment",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lastClaimedEpoch",
                "type": "t_uint40",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "activeTime",
                "type": "t_uint40",
                "offset": 25,
                "slot": "2"
              },
              {
                "label": "tier",
                "type": "t_uint16",
                "offset": 30,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "7a666c55df1299a4657b178c2caa70c627f491a8f3654c1f50bc776a9f96dc34": {
      "address": "0xCE89b26D638d08C244c0FD60eb68FBE29c003398",
      "txHash": "0xc886a75b73535bc5445da39917615d5eb877100fca64513e441854cb784803c2",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:477"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:7"
          },
          {
            "label": "nextModelId",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:8"
          },
          {
            "label": "mintPrice",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:9"
          },
          {
            "label": "royaltyReceiver",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:10"
          },
          {
            "label": "royaltyPortion",
            "offset": 20,
            "slot": "154",
            "type": "t_uint16",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:11"
          },
          {
            "label": "isManager",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:13"
          },
          {
            "label": "token",
            "offset": 0,
            "slot": "156",
            "type": "t_address",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:15"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "157",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:17"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "205",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "206",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "207",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "208",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "209",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "257",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:17"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "258",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:20"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "259",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:23"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "260",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:26"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "261",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "307",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "308",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "357",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:53"
          },
          {
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC721URIStorageUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:17"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "408",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC721URIStorageUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:86"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "457",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "458",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "8c1a558e95b6d70f2823aa521433f4d35629568e9b8399800dbd6c76c4bb913d": {
      "address": "0x99724Adef2836B56a5fDAD2FdC44f44518F92F5A",
      "txHash": "0x0c0bf97703770b677a12ce690b7c02275a7a96d24bcd5e04bec00437a6fb67d9",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256",
            "contract": "HybridModelERC20Storage",
            "src": "contracts/storages/HybridModelERC20Storage.sol:7"
          },
          {
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage",
            "contract": "HybridModelERC20Storage",
            "src": "contracts/storages/HybridModelERC20Storage.sol:9"
          },
          {
            "label": "metadata",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage",
            "contract": "HybridModelERC20Storage",
            "src": "contracts/storages/HybridModelERC20Storage.sol:10"
          },
          {
            "label": "workerHub",
            "offset": 0,
            "slot": "3",
            "type": "t_address",
            "contract": "HybridModelERC20Storage",
            "src": "contracts/storages/HybridModelERC20Storage.sol:12"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)50_storage",
            "contract": "HybridModelERC20Storage",
            "src": "contracts/storages/HybridModelERC20Storage.sol:14"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "54",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "54",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "55",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "105",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "106",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "155",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "156",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "205",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "61ea19b23b309ee0bca981b02bb2a7d7b639efe3ab84b99667748d71f0a5372b": {
      "address": "0x77095d444Ac0b1eB66ddAD19A1e4Cf1797f3D67C",
      "txHash": "0xb37396f36aa2eb773ce26c0d401aa15a460bbad9d81b012428ac720534125e2d",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "101",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:25"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "102",
            "type": "t_string_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:28"
          },
          {
            "label": "_owners",
            "offset": 0,
            "slot": "103",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:31"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "104",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
          },
          {
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "105",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:37"
          },
          {
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:40"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "107",
            "type": "t_array(t_uint256)44_storage",
            "contract": "ERC721Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:477"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_uint256,t_address)",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:7"
          },
          {
            "label": "nextModelId",
            "offset": 0,
            "slot": "152",
            "type": "t_uint256",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:8"
          },
          {
            "label": "mintPrice",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:9"
          },
          {
            "label": "royaltyReceiver",
            "offset": 0,
            "slot": "154",
            "type": "t_address",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:10"
          },
          {
            "label": "royaltyPortion",
            "offset": 20,
            "slot": "154",
            "type": "t_uint16",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:11"
          },
          {
            "label": "isManager",
            "offset": 0,
            "slot": "155",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:13"
          },
          {
            "label": "token",
            "offset": 0,
            "slot": "156",
            "type": "t_address",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:15"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "157",
            "type": "t_array(t_uint256)48_storage",
            "contract": "ModelCollectionERC20Storage",
            "src": "contracts/storages/ModelCollectionERC20Storage.sol:17"
          },
          {
            "label": "_hashedName",
            "offset": 0,
            "slot": "205",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:40",
            "renamedFrom": "_HASHED_NAME"
          },
          {
            "label": "_hashedVersion",
            "offset": 0,
            "slot": "206",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:42",
            "renamedFrom": "_HASHED_VERSION"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "207",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
          },
          {
            "label": "_version",
            "offset": 0,
            "slot": "208",
            "type": "t_string_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:45"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "209",
            "type": "t_array(t_uint256)48_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:204"
          },
          {
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "257",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:17"
          },
          {
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "258",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:20"
          },
          {
            "label": "_allTokens",
            "offset": 0,
            "slot": "259",
            "type": "t_array(t_uint256)dyn_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:23"
          },
          {
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "260",
            "type": "t_mapping(t_uint256,t_uint256)",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:26"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "261",
            "type": "t_array(t_uint256)46_storage",
            "contract": "ERC721EnumerableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol:171"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "307",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "308",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "357",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC721PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721PausableUpgradeable.sol:53"
          },
          {
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "407",
            "type": "t_mapping(t_uint256,t_string_storage)",
            "contract": "ERC721URIStorageUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:17"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "408",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC721URIStorageUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol:86"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "457",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "458",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)44_storage": {
            "label": "uint256[44]",
            "numberOfBytes": "1408"
          },
          "t_array(t_uint256)46_storage": {
            "label": "uint256[46]",
            "numberOfBytes": "1472"
          },
          "t_array(t_uint256)48_storage": {
            "label": "uint256[48]",
            "numberOfBytes": "1536"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_address)": {
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "0294ff0cda787e87a955697c2a0688b1e7efd133d4440eb064d14a504e7c3e46": {
      "address": "0x8d06993F6a9b8c21B2329428320Ab12Bb8d6b7CF",
      "txHash": "0x146335dd6062a3fd9e41ff1af332f9f9c181229d854125013e8ec2b3c7ddadee",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "randomizer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Randomizer)4436_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:10"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(Model)4076_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:12"
          },
          {
            "label": "miners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Worker)4089_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:13"
          },
          {
            "label": "validators",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Worker)4089_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:14"
          },
          {
            "label": "minerAddressesByModel",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(AddressSet)4480_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:16"
          },
          {
            "label": "validatorAddressesByModel",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(AddressSet)4480_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:17"
          },
          {
            "label": "modelAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)4480_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:19"
          },
          {
            "label": "minerAddresses",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)4480_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:20"
          },
          {
            "label": "validatorAddresses",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(AddressSet)4480_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:21"
          },
          {
            "label": "minerUnstakeRequests",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4174_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:23"
          },
          {
            "label": "validatorUnstakeRequests",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4174_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:24"
          },
          {
            "label": "inferenceNumber",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:26"
          },
          {
            "label": "inferences",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(Inference)4149_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:27"
          },
          {
            "label": "assignmentNumber",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:29"
          },
          {
            "label": "assignments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(Assignment)4113_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:30"
          },
          {
            "label": "assignmentsByMiner",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_struct(Uint256Set)4650_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:31"
          },
          {
            "label": "assignmentsByInference",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_struct(Uint256Set)4650_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:32"
          },
          {
            "label": "__validatorDisputed",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:34"
          },
          {
            "label": "rewardInEpoch",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(MinerEpochState)4071_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:38"
          },
          {
            "label": "__minerTaskCompleted",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:43"
          },
          {
            "label": "minerMinimumStake",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:45"
          },
          {
            "label": "validatorMinimumStake",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:46"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "25",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:47"
          },
          {
            "label": "feePercentage",
            "offset": 20,
            "slot": "25",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:48"
          },
          {
            "label": "miningTimeLimit",
            "offset": 22,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:49"
          },
          {
            "label": "validatingTimeLimit",
            "offset": 27,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:50"
          },
          {
            "label": "disputingTimeLimit",
            "offset": 0,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:51"
          },
          {
            "label": "penaltyDuration",
            "offset": 5,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:52"
          },
          {
            "label": "unstakeDelayTime",
            "offset": 10,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:53"
          },
          {
            "label": "minerRequirement",
            "offset": 15,
            "slot": "26",
            "type": "t_uint8",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:54"
          },
          {
            "label": "maximumTier",
            "offset": 16,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:56"
          },
          {
            "label": "__disqualificationPercentage",
            "offset": 18,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:57"
          },
          {
            "label": "currentEpoch",
            "offset": 20,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:60"
          },
          {
            "label": "blocksPerEpoch",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:61"
          },
          {
            "label": "lastBlock",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:62"
          },
          {
            "label": "rewardPerEpochBasedOnPerf",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:63"
          },
          {
            "label": "rewardPerEpoch",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:64"
          },
          {
            "label": "finePercentage",
            "offset": 0,
            "slot": "31",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:67"
          },
          {
            "label": "minerRewards",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:70"
          },
          {
            "label": "boost",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_struct(Boost)4183_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:73"
          },
          {
            "label": "stakeToken",
            "offset": 0,
            "slot": "34",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:75"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "35",
            "type": "t_array(t_uint256)96_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:77"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "131",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "131",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "132",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "182",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "183",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "232",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "282",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "283",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)96_storage": {
            "label": "uint256[96]",
            "numberOfBytes": "3072"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(InferenceStatus)4062": {
            "label": "enum IWorkerHubERC20.InferenceStatus",
            "members": [
              "Nil",
              "Solving",
              "Disputing",
              "Solved",
              "Killed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressSet)4480_storage)": {
            "label": "mapping(address => struct Set.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Boost)4183_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Boost)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Model)4076_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Model)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Uint256Set)4650_storage)": {
            "label": "mapping(address => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UnstakeRequest)4174_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.UnstakeRequest)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Worker)4089_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Worker)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Assignment)4113_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Assignment)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Inference)4149_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Inference)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(MinerEpochState)4071_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.MinerEpochState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Uint256Set)4650_storage)": {
            "label": "mapping(uint256 => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4480_storage": {
            "label": "struct Set.AddressSet",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Assignment)4113_storage": {
            "label": "struct IWorkerHubERC20.Assignment",
            "members": [
              {
                "label": "inferenceId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "output",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "worker",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disapprovalCount",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Boost)4183_storage": {
            "label": "struct IWorkerHubERC20.Boost",
            "members": [
              {
                "label": "minerTimestamp",
                "type": "t_uint40",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validatorTimestamp",
                "type": "t_uint40",
                "offset": 5,
                "slot": "0"
              },
              {
                "label": "reserved1",
                "type": "t_uint48",
                "offset": 10,
                "slot": "0"
              },
              {
                "label": "reserved2",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Inference)4149_storage": {
            "label": "struct IWorkerHubERC20.Inference",
            "members": [
              {
                "label": "assignments",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "input",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disputingAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "expiredAt",
                "type": "t_uint40",
                "offset": 20,
                "slot": "4"
              },
              {
                "label": "firstSubmissionId",
                "type": "t_uint8",
                "offset": 25,
                "slot": "4"
              },
              {
                "label": "status",
                "type": "t_enum(InferenceStatus)4062",
                "offset": 26,
                "slot": "4"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(MinerEpochState)4071_storage": {
            "label": "struct IWorkerHubERC20.MinerEpochState",
            "members": [
              {
                "label": "perfReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "epochReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalTaskCompleted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalMiner",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Model)4076_storage": {
            "label": "struct IWorkerHubERC20.Model",
            "members": [
              {
                "label": "minimumFee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tier",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Randomizer)4436_storage": {
            "label": "struct Random.Randomizer",
            "members": [
              {
                "label": "nonce",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Uint256Set)4650_storage": {
            "label": "struct Set.Uint256Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UnstakeRequest)4174_storage": {
            "label": "struct IWorkerHubERC20.UnstakeRequest",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockAt",
                "type": "t_uint40",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Worker)4089_storage": {
            "label": "struct IWorkerHubERC20.Worker",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "commitment",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lastClaimedEpoch",
                "type": "t_uint40",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "activeTime",
                "type": "t_uint40",
                "offset": 25,
                "slot": "2"
              },
              {
                "label": "tier",
                "type": "t_uint16",
                "offset": 30,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "28d0b74519fe075a7edca19b31c0c42ae52b0ad9a36f820a42b1edf9829417f8": {
      "address": "0x37CB4D4f4283Bc9C35898302793Fa813e7fd3f43",
      "txHash": "0x99429ce648bc823b07683036cb3088b758a34dda60e2b6291abd5a945cae66eb",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "randomizer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Randomizer)7863_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:10"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(Model)7503_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:12"
          },
          {
            "label": "miners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Worker)7516_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:13"
          },
          {
            "label": "validators",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Worker)7516_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:14"
          },
          {
            "label": "minerAddressesByModel",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(AddressSet)7907_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:16"
          },
          {
            "label": "validatorAddressesByModel",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(AddressSet)7907_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:17"
          },
          {
            "label": "modelAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)7907_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:19"
          },
          {
            "label": "minerAddresses",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)7907_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:20"
          },
          {
            "label": "validatorAddresses",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(AddressSet)7907_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:21"
          },
          {
            "label": "minerUnstakeRequests",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)7601_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:23"
          },
          {
            "label": "validatorUnstakeRequests",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)7601_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:24"
          },
          {
            "label": "inferenceNumber",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:26"
          },
          {
            "label": "inferences",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(Inference)7576_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:27"
          },
          {
            "label": "assignmentNumber",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:29"
          },
          {
            "label": "assignments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(Assignment)7540_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:30"
          },
          {
            "label": "assignmentsByMiner",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_struct(Uint256Set)8077_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:31"
          },
          {
            "label": "assignmentsByInference",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_struct(Uint256Set)8077_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:32"
          },
          {
            "label": "validatorDisputed",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:34"
          },
          {
            "label": "rewardInEpoch",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(MinerEpochState)7498_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:38"
          },
          {
            "label": "minerTaskCompleted",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:43"
          },
          {
            "label": "minerMinimumStake",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:45"
          },
          {
            "label": "validatorMinimumStake",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:46"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "25",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:47"
          },
          {
            "label": "feePercentage",
            "offset": 20,
            "slot": "25",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:48"
          },
          {
            "label": "miningTimeLimit",
            "offset": 22,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:49"
          },
          {
            "label": "validatingTimeLimit",
            "offset": 27,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:50"
          },
          {
            "label": "disputingTimeLimit",
            "offset": 0,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:51"
          },
          {
            "label": "penaltyDuration",
            "offset": 5,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:52"
          },
          {
            "label": "unstakeDelayTime",
            "offset": 10,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:53"
          },
          {
            "label": "minerRequirement",
            "offset": 15,
            "slot": "26",
            "type": "t_uint8",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:54"
          },
          {
            "label": "maximumTier",
            "offset": 16,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:56"
          },
          {
            "label": "disqualificationPercentage",
            "offset": 18,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:57"
          },
          {
            "label": "currentEpoch",
            "offset": 20,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:60"
          },
          {
            "label": "blocksPerEpoch",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:61"
          },
          {
            "label": "lastBlock",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:62"
          },
          {
            "label": "rewardPerEpochBasedOnPerf",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:63"
          },
          {
            "label": "rewardPerEpoch",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:64"
          },
          {
            "label": "finePercentage",
            "offset": 0,
            "slot": "31",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:67"
          },
          {
            "label": "minerRewards",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:70"
          },
          {
            "label": "boost",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_struct(Boost)7610_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:73"
          },
          {
            "label": "stakeToken",
            "offset": 0,
            "slot": "34",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:75"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "35",
            "type": "t_array(t_uint256)96_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:77"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "131",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "131",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "132",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "182",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "183",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "232",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "282",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "283",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)96_storage": {
            "label": "uint256[96]",
            "numberOfBytes": "3072"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(InferenceStatus)7489": {
            "label": "enum IWorkerHubERC20.InferenceStatus",
            "members": [
              "Nil",
              "Solving",
              "Disputing",
              "Solved",
              "Killed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressSet)7907_storage)": {
            "label": "mapping(address => struct Set.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Boost)7610_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Boost)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Model)7503_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Model)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Uint256Set)8077_storage)": {
            "label": "mapping(address => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UnstakeRequest)7601_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.UnstakeRequest)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Worker)7516_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Worker)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Assignment)7540_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Assignment)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Inference)7576_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Inference)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(MinerEpochState)7498_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.MinerEpochState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Uint256Set)8077_storage)": {
            "label": "mapping(uint256 => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)7907_storage": {
            "label": "struct Set.AddressSet",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Assignment)7540_storage": {
            "label": "struct IWorkerHubERC20.Assignment",
            "members": [
              {
                "label": "inferenceId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "output",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "worker",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disapprovalCount",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Boost)7610_storage": {
            "label": "struct IWorkerHubERC20.Boost",
            "members": [
              {
                "label": "minerTimestamp",
                "type": "t_uint40",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validatorTimestamp",
                "type": "t_uint40",
                "offset": 5,
                "slot": "0"
              },
              {
                "label": "reserved1",
                "type": "t_uint48",
                "offset": 10,
                "slot": "0"
              },
              {
                "label": "reserved2",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Inference)7576_storage": {
            "label": "struct IWorkerHubERC20.Inference",
            "members": [
              {
                "label": "assignments",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "input",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disputingAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "expiredAt",
                "type": "t_uint40",
                "offset": 20,
                "slot": "4"
              },
              {
                "label": "firstSubmissionId",
                "type": "t_uint8",
                "offset": 25,
                "slot": "4"
              },
              {
                "label": "status",
                "type": "t_enum(InferenceStatus)7489",
                "offset": 26,
                "slot": "4"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(MinerEpochState)7498_storage": {
            "label": "struct IWorkerHubERC20.MinerEpochState",
            "members": [
              {
                "label": "perfReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "epochReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalTaskCompleted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalMiner",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Model)7503_storage": {
            "label": "struct IWorkerHubERC20.Model",
            "members": [
              {
                "label": "minimumFee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tier",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Randomizer)7863_storage": {
            "label": "struct Random.Randomizer",
            "members": [
              {
                "label": "nonce",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Uint256Set)8077_storage": {
            "label": "struct Set.Uint256Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UnstakeRequest)7601_storage": {
            "label": "struct IWorkerHubERC20.UnstakeRequest",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockAt",
                "type": "t_uint40",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Worker)7516_storage": {
            "label": "struct IWorkerHubERC20.Worker",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "commitment",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lastClaimedEpoch",
                "type": "t_uint40",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "activeTime",
                "type": "t_uint40",
                "offset": 25,
                "slot": "2"
              },
              {
                "label": "tier",
                "type": "t_uint16",
                "offset": 30,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "9a0861be27386f5299c0f6c3bca1c09c5611616083d05b15ed1b921f46eea1d4": {
      "address": "0x15223Ffa55A3309219ea1F4216Ed8986ab2012a7",
      "txHash": "0xd1ac174ba6b06e8de48dc3fe58e991b240281da171c5b57bb819e9b90ae77252",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "randomizer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Randomizer)4626_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:10"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(Model)4266_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:12"
          },
          {
            "label": "miners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Worker)4279_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:13"
          },
          {
            "label": "validators",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Worker)4279_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:14"
          },
          {
            "label": "minerAddressesByModel",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(AddressSet)4670_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:16"
          },
          {
            "label": "validatorAddressesByModel",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(AddressSet)4670_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:17"
          },
          {
            "label": "modelAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)4670_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:19"
          },
          {
            "label": "minerAddresses",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)4670_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:20"
          },
          {
            "label": "validatorAddresses",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(AddressSet)4670_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:21"
          },
          {
            "label": "minerUnstakeRequests",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4364_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:23"
          },
          {
            "label": "validatorUnstakeRequests",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4364_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:24"
          },
          {
            "label": "inferenceNumber",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:26"
          },
          {
            "label": "inferences",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(Inference)4339_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:27"
          },
          {
            "label": "assignmentNumber",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:29"
          },
          {
            "label": "assignments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(Assignment)4303_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:30"
          },
          {
            "label": "assignmentsByMiner",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_struct(Uint256Set)4840_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:31"
          },
          {
            "label": "assignmentsByInference",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_struct(Uint256Set)4840_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:32"
          },
          {
            "label": "validatorDisputed",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:34"
          },
          {
            "label": "rewardInEpoch",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(MinerEpochState)4261_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:38"
          },
          {
            "label": "minerTaskCompleted",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:43"
          },
          {
            "label": "minerMinimumStake",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:45"
          },
          {
            "label": "validatorMinimumStake",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:46"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "25",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:47"
          },
          {
            "label": "feePercentage",
            "offset": 20,
            "slot": "25",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:48"
          },
          {
            "label": "miningTimeLimit",
            "offset": 22,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:49"
          },
          {
            "label": "validatingTimeLimit",
            "offset": 27,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:50"
          },
          {
            "label": "disputingTimeLimit",
            "offset": 0,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:51"
          },
          {
            "label": "penaltyDuration",
            "offset": 5,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:52"
          },
          {
            "label": "unstakeDelayTime",
            "offset": 10,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:53"
          },
          {
            "label": "minerRequirement",
            "offset": 15,
            "slot": "26",
            "type": "t_uint8",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:54"
          },
          {
            "label": "maximumTier",
            "offset": 16,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:56"
          },
          {
            "label": "disqualificationPercentage",
            "offset": 18,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:57"
          },
          {
            "label": "currentEpoch",
            "offset": 20,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:60"
          },
          {
            "label": "blocksPerEpoch",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:61"
          },
          {
            "label": "lastBlock",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:62"
          },
          {
            "label": "rewardPerEpochBasedOnPerf",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:63"
          },
          {
            "label": "rewardPerEpoch",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:64"
          },
          {
            "label": "finePercentage",
            "offset": 0,
            "slot": "31",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:67"
          },
          {
            "label": "minerRewards",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:70"
          },
          {
            "label": "boost",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_struct(Boost)4373_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:73"
          },
          {
            "label": "stakeToken",
            "offset": 0,
            "slot": "34",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:75"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "35",
            "type": "t_array(t_uint256)96_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:77"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "131",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "131",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "132",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "182",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "183",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "232",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "282",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "283",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)96_storage": {
            "label": "uint256[96]",
            "numberOfBytes": "3072"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(InferenceStatus)4252": {
            "label": "enum IWorkerHubERC20.InferenceStatus",
            "members": [
              "Nil",
              "Solving",
              "Disputing",
              "Solved",
              "Killed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressSet)4670_storage)": {
            "label": "mapping(address => struct Set.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Boost)4373_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Boost)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Model)4266_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Model)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Uint256Set)4840_storage)": {
            "label": "mapping(address => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UnstakeRequest)4364_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.UnstakeRequest)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Worker)4279_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Worker)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Assignment)4303_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Assignment)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Inference)4339_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Inference)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(MinerEpochState)4261_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.MinerEpochState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Uint256Set)4840_storage)": {
            "label": "mapping(uint256 => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4670_storage": {
            "label": "struct Set.AddressSet",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Assignment)4303_storage": {
            "label": "struct IWorkerHubERC20.Assignment",
            "members": [
              {
                "label": "inferenceId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "output",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "worker",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disapprovalCount",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Boost)4373_storage": {
            "label": "struct IWorkerHubERC20.Boost",
            "members": [
              {
                "label": "minerTimestamp",
                "type": "t_uint40",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validatorTimestamp",
                "type": "t_uint40",
                "offset": 5,
                "slot": "0"
              },
              {
                "label": "reserved1",
                "type": "t_uint48",
                "offset": 10,
                "slot": "0"
              },
              {
                "label": "reserved2",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Inference)4339_storage": {
            "label": "struct IWorkerHubERC20.Inference",
            "members": [
              {
                "label": "assignments",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "input",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disputingAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "expiredAt",
                "type": "t_uint40",
                "offset": 20,
                "slot": "4"
              },
              {
                "label": "firstSubmissionId",
                "type": "t_uint8",
                "offset": 25,
                "slot": "4"
              },
              {
                "label": "status",
                "type": "t_enum(InferenceStatus)4252",
                "offset": 26,
                "slot": "4"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(MinerEpochState)4261_storage": {
            "label": "struct IWorkerHubERC20.MinerEpochState",
            "members": [
              {
                "label": "perfReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "epochReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalTaskCompleted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalMiner",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Model)4266_storage": {
            "label": "struct IWorkerHubERC20.Model",
            "members": [
              {
                "label": "minimumFee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tier",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Randomizer)4626_storage": {
            "label": "struct Random.Randomizer",
            "members": [
              {
                "label": "nonce",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Uint256Set)4840_storage": {
            "label": "struct Set.Uint256Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UnstakeRequest)4364_storage": {
            "label": "struct IWorkerHubERC20.UnstakeRequest",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockAt",
                "type": "t_uint40",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Worker)4279_storage": {
            "label": "struct IWorkerHubERC20.Worker",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "commitment",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lastClaimedEpoch",
                "type": "t_uint40",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "activeTime",
                "type": "t_uint40",
                "offset": 25,
                "slot": "2"
              },
              {
                "label": "tier",
                "type": "t_uint16",
                "offset": 30,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "0e907da6c08375e0ca4180472ce18c870d772a7850d379d5c94e6e163e40c66c": {
      "address": "0x5Bc4f0a25698Df75187B6BC165d9F077fE417756",
      "txHash": "0xe439e210a3b5144d2e21acf0c9064d7784369b46b892f3c7294751190172b089",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "randomizer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Randomizer)4888_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:10"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(Model)4528_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:12"
          },
          {
            "label": "miners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Worker)4541_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:13"
          },
          {
            "label": "validators",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Worker)4541_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:14"
          },
          {
            "label": "minerAddressesByModel",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(AddressSet)4932_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:16"
          },
          {
            "label": "validatorAddressesByModel",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(AddressSet)4932_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:17"
          },
          {
            "label": "modelAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)4932_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:19"
          },
          {
            "label": "minerAddresses",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)4932_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:20"
          },
          {
            "label": "validatorAddresses",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(AddressSet)4932_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:21"
          },
          {
            "label": "minerUnstakeRequests",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4626_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:23"
          },
          {
            "label": "validatorUnstakeRequests",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4626_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:24"
          },
          {
            "label": "inferenceNumber",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:26"
          },
          {
            "label": "inferences",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(Inference)4601_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:27"
          },
          {
            "label": "assignmentNumber",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:29"
          },
          {
            "label": "assignments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(Assignment)4565_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:30"
          },
          {
            "label": "assignmentsByMiner",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_struct(Uint256Set)5102_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:31"
          },
          {
            "label": "assignmentsByInference",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_struct(Uint256Set)5102_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:32"
          },
          {
            "label": "validatorDisputed",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:34"
          },
          {
            "label": "rewardInEpoch",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(MinerEpochState)4523_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:38"
          },
          {
            "label": "minerTaskCompleted",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:43"
          },
          {
            "label": "minerMinimumStake",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:45"
          },
          {
            "label": "validatorMinimumStake",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:46"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "25",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:47"
          },
          {
            "label": "feePercentage",
            "offset": 20,
            "slot": "25",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:48"
          },
          {
            "label": "miningTimeLimit",
            "offset": 22,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:49"
          },
          {
            "label": "validatingTimeLimit",
            "offset": 27,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:50"
          },
          {
            "label": "disputingTimeLimit",
            "offset": 0,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:51"
          },
          {
            "label": "penaltyDuration",
            "offset": 5,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:52"
          },
          {
            "label": "unstakeDelayTime",
            "offset": 10,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:53"
          },
          {
            "label": "minerRequirement",
            "offset": 15,
            "slot": "26",
            "type": "t_uint8",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:54"
          },
          {
            "label": "maximumTier",
            "offset": 16,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:56"
          },
          {
            "label": "disqualificationPercentage",
            "offset": 18,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:57"
          },
          {
            "label": "currentEpoch",
            "offset": 20,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:60"
          },
          {
            "label": "blocksPerEpoch",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:61"
          },
          {
            "label": "lastBlock",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:62"
          },
          {
            "label": "rewardPerEpochBasedOnPerf",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:63"
          },
          {
            "label": "rewardPerEpoch",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:64"
          },
          {
            "label": "finePercentage",
            "offset": 0,
            "slot": "31",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:67"
          },
          {
            "label": "minerRewards",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:70"
          },
          {
            "label": "boost",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_struct(Boost)4635_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:73"
          },
          {
            "label": "stakeToken",
            "offset": 0,
            "slot": "34",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:75"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "35",
            "type": "t_array(t_uint256)96_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:77"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "131",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "131",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "132",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "182",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "183",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "232",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "282",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "283",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)96_storage": {
            "label": "uint256[96]",
            "numberOfBytes": "3072"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(InferenceStatus)4514": {
            "label": "enum IWorkerHubERC20.InferenceStatus",
            "members": [
              "Nil",
              "Solving",
              "Disputing",
              "Solved",
              "Killed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressSet)4932_storage)": {
            "label": "mapping(address => struct Set.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Boost)4635_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Boost)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Model)4528_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Model)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Uint256Set)5102_storage)": {
            "label": "mapping(address => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UnstakeRequest)4626_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.UnstakeRequest)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Worker)4541_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Worker)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Assignment)4565_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Assignment)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Inference)4601_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Inference)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(MinerEpochState)4523_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.MinerEpochState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Uint256Set)5102_storage)": {
            "label": "mapping(uint256 => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4932_storage": {
            "label": "struct Set.AddressSet",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Assignment)4565_storage": {
            "label": "struct IWorkerHubERC20.Assignment",
            "members": [
              {
                "label": "inferenceId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "output",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "worker",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disapprovalCount",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Boost)4635_storage": {
            "label": "struct IWorkerHubERC20.Boost",
            "members": [
              {
                "label": "minerTimestamp",
                "type": "t_uint40",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validatorTimestamp",
                "type": "t_uint40",
                "offset": 5,
                "slot": "0"
              },
              {
                "label": "reserved1",
                "type": "t_uint48",
                "offset": 10,
                "slot": "0"
              },
              {
                "label": "reserved2",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Inference)4601_storage": {
            "label": "struct IWorkerHubERC20.Inference",
            "members": [
              {
                "label": "assignments",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "input",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disputingAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "expiredAt",
                "type": "t_uint40",
                "offset": 20,
                "slot": "4"
              },
              {
                "label": "firstSubmissionId",
                "type": "t_uint8",
                "offset": 25,
                "slot": "4"
              },
              {
                "label": "status",
                "type": "t_enum(InferenceStatus)4514",
                "offset": 26,
                "slot": "4"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(MinerEpochState)4523_storage": {
            "label": "struct IWorkerHubERC20.MinerEpochState",
            "members": [
              {
                "label": "perfReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "epochReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalTaskCompleted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalMiner",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Model)4528_storage": {
            "label": "struct IWorkerHubERC20.Model",
            "members": [
              {
                "label": "minimumFee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tier",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Randomizer)4888_storage": {
            "label": "struct Random.Randomizer",
            "members": [
              {
                "label": "nonce",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Uint256Set)5102_storage": {
            "label": "struct Set.Uint256Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UnstakeRequest)4626_storage": {
            "label": "struct IWorkerHubERC20.UnstakeRequest",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockAt",
                "type": "t_uint40",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Worker)4541_storage": {
            "label": "struct IWorkerHubERC20.Worker",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "commitment",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lastClaimedEpoch",
                "type": "t_uint40",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "activeTime",
                "type": "t_uint40",
                "offset": 25,
                "slot": "2"
              },
              {
                "label": "tier",
                "type": "t_uint16",
                "offset": 30,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    },
    "c424b2114cd4ad62b30a4454429cf04f1b664741ff7fa0ae30348bbe60ef5aa4": {
      "address": "0x10AC7Db56D85d5F4946EF34A97EF9a0D839D5b21",
      "txHash": "0xac9b1f3baf1c662d0f8a6c539cb821dea446a3ace7d80f67d172c715464ca32b",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "randomizer",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Randomizer)4925_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:10"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(Model)4565_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:12"
          },
          {
            "label": "miners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(Worker)4578_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:13"
          },
          {
            "label": "validators",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_struct(Worker)4578_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:14"
          },
          {
            "label": "minerAddressesByModel",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(AddressSet)4969_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:16"
          },
          {
            "label": "validatorAddressesByModel",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(AddressSet)4969_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:17"
          },
          {
            "label": "modelAddresses",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)4969_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:19"
          },
          {
            "label": "minerAddresses",
            "offset": 0,
            "slot": "8",
            "type": "t_struct(AddressSet)4969_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:20"
          },
          {
            "label": "validatorAddresses",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(AddressSet)4969_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:21"
          },
          {
            "label": "minerUnstakeRequests",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4663_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:23"
          },
          {
            "label": "validatorUnstakeRequests",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(UnstakeRequest)4663_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:24"
          },
          {
            "label": "inferenceNumber",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:26"
          },
          {
            "label": "inferences",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_uint256,t_struct(Inference)4638_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:27"
          },
          {
            "label": "assignmentNumber",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:29"
          },
          {
            "label": "assignments",
            "offset": 0,
            "slot": "17",
            "type": "t_mapping(t_uint256,t_struct(Assignment)4602_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:30"
          },
          {
            "label": "assignmentsByMiner",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_address,t_struct(Uint256Set)5139_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:31"
          },
          {
            "label": "assignmentsByInference",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_uint256,t_struct(Uint256Set)5139_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:32"
          },
          {
            "label": "validatorDisputed",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:34"
          },
          {
            "label": "rewardInEpoch",
            "offset": 0,
            "slot": "21",
            "type": "t_mapping(t_uint256,t_struct(MinerEpochState)4560_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:38"
          },
          {
            "label": "minerTaskCompleted",
            "offset": 0,
            "slot": "22",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:43"
          },
          {
            "label": "minerMinimumStake",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:45"
          },
          {
            "label": "validatorMinimumStake",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:46"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "25",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:47"
          },
          {
            "label": "feePercentage",
            "offset": 20,
            "slot": "25",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:48"
          },
          {
            "label": "miningTimeLimit",
            "offset": 22,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:49"
          },
          {
            "label": "validatingTimeLimit",
            "offset": 27,
            "slot": "25",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:50"
          },
          {
            "label": "disputingTimeLimit",
            "offset": 0,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:51"
          },
          {
            "label": "penaltyDuration",
            "offset": 5,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:52"
          },
          {
            "label": "unstakeDelayTime",
            "offset": 10,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:53"
          },
          {
            "label": "minerRequirement",
            "offset": 15,
            "slot": "26",
            "type": "t_uint8",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:54"
          },
          {
            "label": "maximumTier",
            "offset": 16,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:56"
          },
          {
            "label": "disqualificationPercentage",
            "offset": 18,
            "slot": "26",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:57"
          },
          {
            "label": "currentEpoch",
            "offset": 20,
            "slot": "26",
            "type": "t_uint40",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:60"
          },
          {
            "label": "blocksPerEpoch",
            "offset": 0,
            "slot": "27",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:61"
          },
          {
            "label": "lastBlock",
            "offset": 0,
            "slot": "28",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:62"
          },
          {
            "label": "rewardPerEpochBasedOnPerf",
            "offset": 0,
            "slot": "29",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:63"
          },
          {
            "label": "rewardPerEpoch",
            "offset": 0,
            "slot": "30",
            "type": "t_uint256",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:64"
          },
          {
            "label": "finePercentage",
            "offset": 0,
            "slot": "31",
            "type": "t_uint16",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:67"
          },
          {
            "label": "minerRewards",
            "offset": 0,
            "slot": "32",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:70"
          },
          {
            "label": "boost",
            "offset": 0,
            "slot": "33",
            "type": "t_mapping(t_address,t_struct(Boost)4672_storage)",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:73"
          },
          {
            "label": "stakeToken",
            "offset": 0,
            "slot": "34",
            "type": "t_address",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:75"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "35",
            "type": "t_array(t_uint256)96_storage",
            "contract": "WorkerHubERC20Storage",
            "src": "contracts/storages/WorkerHubERC20Storage.sol:77"
          },
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "131",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:63",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "131",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:68"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "132",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:40"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "182",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "183",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "232",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "233",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:116"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "282",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "283",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:88"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_array(t_uint256)96_storage": {
            "label": "uint256[96]",
            "numberOfBytes": "3072"
          },
          "t_array(t_uint256)dyn_storage": {
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_enum(InferenceStatus)4551": {
            "label": "enum IWorkerHubERC20.InferenceStatus",
            "members": [
              "Nil",
              "Solving",
              "Disputing",
              "Solved",
              "Killed"
            ],
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
            "label": "mapping(address => mapping(uint256 => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(AddressSet)4969_storage)": {
            "label": "mapping(address => struct Set.AddressSet)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Boost)4672_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Boost)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Model)4565_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Model)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Uint256Set)5139_storage)": {
            "label": "mapping(address => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(UnstakeRequest)4663_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.UnstakeRequest)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Worker)4578_storage)": {
            "label": "mapping(address => struct IWorkerHubERC20.Worker)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_bool)": {
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Assignment)4602_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Assignment)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Inference)4638_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.Inference)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(MinerEpochState)4560_storage)": {
            "label": "mapping(uint256 => struct IWorkerHubERC20.MinerEpochState)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(Uint256Set)5139_storage)": {
            "label": "mapping(uint256 => struct Set.Uint256Set)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)4969_storage": {
            "label": "struct Set.AddressSet",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_address)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_address,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Assignment)4602_storage": {
            "label": "struct IWorkerHubERC20.Assignment",
            "members": [
              {
                "label": "inferenceId",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "output",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "worker",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disapprovalCount",
                "type": "t_uint8",
                "offset": 20,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_struct(Boost)4672_storage": {
            "label": "struct IWorkerHubERC20.Boost",
            "members": [
              {
                "label": "minerTimestamp",
                "type": "t_uint40",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "validatorTimestamp",
                "type": "t_uint40",
                "offset": 5,
                "slot": "0"
              },
              {
                "label": "reserved1",
                "type": "t_uint48",
                "offset": 10,
                "slot": "0"
              },
              {
                "label": "reserved2",
                "type": "t_uint128",
                "offset": 16,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Inference)4638_storage": {
            "label": "struct IWorkerHubERC20.Inference",
            "members": [
              {
                "label": "assignments",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "input",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "disputingAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "3"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "4"
              },
              {
                "label": "expiredAt",
                "type": "t_uint40",
                "offset": 20,
                "slot": "4"
              },
              {
                "label": "firstSubmissionId",
                "type": "t_uint8",
                "offset": 25,
                "slot": "4"
              },
              {
                "label": "status",
                "type": "t_enum(InferenceStatus)4551",
                "offset": 26,
                "slot": "4"
              },
              {
                "label": "creator",
                "type": "t_address",
                "offset": 0,
                "slot": "5"
              }
            ],
            "numberOfBytes": "192"
          },
          "t_struct(MinerEpochState)4560_storage": {
            "label": "struct IWorkerHubERC20.MinerEpochState",
            "members": [
              {
                "label": "perfReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "epochReward",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "totalTaskCompleted",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "totalMiner",
                "type": "t_uint256",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Model)4565_storage": {
            "label": "struct IWorkerHubERC20.Model",
            "members": [
              {
                "label": "minimumFee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "tier",
                "type": "t_uint32",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Randomizer)4925_storage": {
            "label": "struct Random.Randomizer",
            "members": [
              {
                "label": "nonce",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Uint256Set)5139_storage": {
            "label": "struct Set.Uint256Set",
            "members": [
              {
                "label": "values",
                "type": "t_array(t_uint256)dyn_storage",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "positions",
                "type": "t_mapping(t_uint256,t_uint256)",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(UnstakeRequest)4663_storage": {
            "label": "struct IWorkerHubERC20.UnstakeRequest",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "unlockAt",
                "type": "t_uint40",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Worker)4578_storage": {
            "label": "struct IWorkerHubERC20.Worker",
            "members": [
              {
                "label": "stake",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "commitment",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "modelAddress",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "lastClaimedEpoch",
                "type": "t_uint40",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "activeTime",
                "type": "t_uint40",
                "offset": 25,
                "slot": "2"
              },
              {
                "label": "tier",
                "type": "t_uint16",
                "offset": 30,
                "slot": "2"
              }
            ],
            "numberOfBytes": "96"
          },
          "t_uint128": {
            "label": "uint128",
            "numberOfBytes": "16"
          },
          "t_uint16": {
            "label": "uint16",
            "numberOfBytes": "2"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint40": {
            "label": "uint40",
            "numberOfBytes": "5"
          },
          "t_uint48": {
            "label": "uint48",
            "numberOfBytes": "6"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        },
        "namespaces": {}
      }
    }
  }
}
